
소프트웨어의 생명 주기
요구사항 -> 분석 -> 설계 -> 정제와 코딩 -> 검증 순으로 진행

요구사항 : 
사용자의 요구사항을 파악
목표 입력과 출력을 파악


분석 :
실제로 다룰 수 있을 정도의 작은 단위들로 나누어

상향식 (Bottom to Top) - 벽, 지붕, 바닥을 만들고 조립시켜 집을 완성
하향식 (Top to Bottom) - 전체적인 틀을 설계한 후 제작

큰 프로젝트일 수록 하향식


설계 :
분석 단계에서 완료된 작업들을 계속함

추상(abstract) 데이터 타입의 생성
-> 알고리즘의 명세와 그 알고리즘 설계 기법 고려
구현에 관한것은 추후에 고려


정제와 코딩 : 
연산과 알고리즘 작성
데이터 객체와는 독립적인 알고리즘을 먼저 기술


검증:

정확성 증명 - 증명할 수 없는 문제는 정확성이 증명된 알고리즘 선택
테스트 - 테스트 데이터와 실제로 수행 가능한 코드를 사용하여 테스트 및 검정
오류제거





객체 - 계산을 수행하고 상태를 갖는 개체 (데이터와 절차적 요소의 결합)

개체는 기본적인 구성 단위
각 객체는 어떤 타입 또는 클래스의 인스턴스
클래스는 상속 관계에 의해 서로 연관 됨



객체 지향 언어
	1. 객체를 지원한다.
	2. 모든 객체는 클래스에 속한다.
	3. 상속을 지원한다. << ※이를 지원하지 않을 시 객체 기반 언어 (JavaScript)



데이터 캡슐화(data encapsulation) 또는 정보 은닉(info hiding) - 외부로부터 객체의 자세한 구현을 감춤

데이터 추상화(data abstraction)은 객체의 명세와 구현을 분리

데이터 타입은 객체들과 이 객체들에 동작하는 연산의 집합

추상 데이터 타입(ADT :abstract data type)은 객체의 명세와 이들 객체에 대한 연산의 명세가 객체의 표현과 연산의 구현으로부터 분리된 방식으로 구성된 데이터 타입




그 이후로 추상화, 타입, 함수에 대한거 쭉 이어지고


static, const 등 설명
함수 이름 다중화 - 같은 이름 함수, 다른 매개 변수,
컴파일러에서 함수 호출부를 없애는 inline 함수

동적 메모리 할당